// Code generated by protoc-gen-go. DO NOT EDIT.
// source: telemetry.proto

package telemetry

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Provisioning_ReadDef_RegLength int32

const (
	Provisioning_ReadDef_RL16 Provisioning_ReadDef_RegLength = 0
	Provisioning_ReadDef_RL8  Provisioning_ReadDef_RegLength = 1
)

var Provisioning_ReadDef_RegLength_name = map[int32]string{
	0: "RL16",
	1: "RL8",
}

var Provisioning_ReadDef_RegLength_value = map[string]int32{
	"RL16": 0,
	"RL8":  1,
}

func (x Provisioning_ReadDef_RegLength) String() string {
	return proto.EnumName(Provisioning_ReadDef_RegLength_name, int32(x))
}

func (Provisioning_ReadDef_RegLength) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_edbfcf76559f568d, []int{2, 0, 0}
}

type Request_Action int32

const (
	//*
	// Request microcontroller reboot.
	Request_REBOOT Request_Action = 0
	//*
	// Request manual schedule execution and Payload frame(s).
	Request_FORCE_READS Request_Action = 1
	//*
	// Request manual Registration frame.
	Request_REQUEST_REGISTRATION Request_Action = 2
)

var Request_Action_name = map[int32]string{
	0: "REBOOT",
	1: "FORCE_READS",
	2: "REQUEST_REGISTRATION",
}

var Request_Action_value = map[string]int32{
	"REBOOT":               0,
	"FORCE_READS":          1,
	"REQUEST_REGISTRATION": 2,
}

func (x Request_Action) String() string {
	return proto.EnumName(Request_Action_name, int32(x))
}

func (Request_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_edbfcf76559f568d, []int{4, 0}
}

//*
// Telemetry wire protocol for MQTT communication between microcontrollers and the backend.
type Telemetry struct {
	// Types that are valid to be assigned to Message:
	//	*Telemetry_Registration
	//	*Telemetry_Provisioning
	//	*Telemetry_Payload
	//	*Telemetry_Request
	Message              isTelemetry_Message `protobuf_oneof:"message"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Telemetry) Reset()         { *m = Telemetry{} }
func (m *Telemetry) String() string { return proto.CompactTextString(m) }
func (*Telemetry) ProtoMessage()    {}
func (*Telemetry) Descriptor() ([]byte, []int) {
	return fileDescriptor_edbfcf76559f568d, []int{0}
}

func (m *Telemetry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Telemetry.Unmarshal(m, b)
}
func (m *Telemetry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Telemetry.Marshal(b, m, deterministic)
}
func (m *Telemetry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Telemetry.Merge(m, src)
}
func (m *Telemetry) XXX_Size() int {
	return xxx_messageInfo_Telemetry.Size(m)
}
func (m *Telemetry) XXX_DiscardUnknown() {
	xxx_messageInfo_Telemetry.DiscardUnknown(m)
}

var xxx_messageInfo_Telemetry proto.InternalMessageInfo

type isTelemetry_Message interface {
	isTelemetry_Message()
}

type Telemetry_Registration struct {
	Registration *Registration `protobuf:"bytes,1,opt,name=registration,proto3,oneof"`
}

type Telemetry_Provisioning struct {
	Provisioning *Provisioning `protobuf:"bytes,2,opt,name=provisioning,proto3,oneof"`
}

type Telemetry_Payload struct {
	Payload *Payload `protobuf:"bytes,3,opt,name=payload,proto3,oneof"`
}

type Telemetry_Request struct {
	Request *Request `protobuf:"bytes,4,opt,name=request,proto3,oneof"`
}

func (*Telemetry_Registration) isTelemetry_Message() {}

func (*Telemetry_Provisioning) isTelemetry_Message() {}

func (*Telemetry_Payload) isTelemetry_Message() {}

func (*Telemetry_Request) isTelemetry_Message() {}

func (m *Telemetry) GetMessage() isTelemetry_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Telemetry) GetRegistration() *Registration {
	if x, ok := m.GetMessage().(*Telemetry_Registration); ok {
		return x.Registration
	}
	return nil
}

func (m *Telemetry) GetProvisioning() *Provisioning {
	if x, ok := m.GetMessage().(*Telemetry_Provisioning); ok {
		return x.Provisioning
	}
	return nil
}

func (m *Telemetry) GetPayload() *Payload {
	if x, ok := m.GetMessage().(*Telemetry_Payload); ok {
		return x.Payload
	}
	return nil
}

func (m *Telemetry) GetRequest() *Request {
	if x, ok := m.GetMessage().(*Telemetry_Request); ok {
		return x.Request
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Telemetry) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Telemetry_Registration)(nil),
		(*Telemetry_Provisioning)(nil),
		(*Telemetry_Payload)(nil),
		(*Telemetry_Request)(nil),
	}
}

//*
// Registration frame (microcontroller -> backend).
//
// The microcontroller UUID (MAC address) will be sent in the MQTT topic.
//
// Conditions:
//  - MQTT connection established, re-established
//  - Peripheral connected, disconnected
type Registration struct {
	//*
	// Firmware version identifier.
	Version uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	//*
	// Microcontroller unique identifier (MAC address).
	Uuid []byte `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	//*
	// Microcontroller IPv4 address.
	Ipv4 []byte `protobuf:"bytes,3,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	//*
	// Microcontroller IPv6 address.
	Ipv6 []byte `protobuf:"bytes,4,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	//*
	// List of connected peripherals.
	Peripherals          []*Registration_Peripheral `protobuf:"bytes,5,rep,name=peripherals,proto3" json:"peripherals,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *Registration) Reset()         { *m = Registration{} }
func (m *Registration) String() string { return proto.CompactTextString(m) }
func (*Registration) ProtoMessage()    {}
func (*Registration) Descriptor() ([]byte, []int) {
	return fileDescriptor_edbfcf76559f568d, []int{1}
}

func (m *Registration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Registration.Unmarshal(m, b)
}
func (m *Registration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Registration.Marshal(b, m, deterministic)
}
func (m *Registration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Registration.Merge(m, src)
}
func (m *Registration) XXX_Size() int {
	return xxx_messageInfo_Registration.Size(m)
}
func (m *Registration) XXX_DiscardUnknown() {
	xxx_messageInfo_Registration.DiscardUnknown(m)
}

var xxx_messageInfo_Registration proto.InternalMessageInfo

func (m *Registration) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Registration) GetUuid() []byte {
	if m != nil {
		return m.Uuid
	}
	return nil
}

func (m *Registration) GetIpv4() []byte {
	if m != nil {
		return m.Ipv4
	}
	return nil
}

func (m *Registration) GetIpv6() []byte {
	if m != nil {
		return m.Ipv6
	}
	return nil
}

func (m *Registration) GetPeripherals() []*Registration_Peripheral {
	if m != nil {
		return m.Peripherals
	}
	return nil
}

type Registration_Peripheral struct {
	//*
	// The I2C bus this peripheral is connected to on the microcontroller. Represented by the SDA line pin.
	BusId uint32 `protobuf:"varint,1,opt,name=busId,proto3" json:"busId,omitempty"`
	//*
	// The I2C bus address this peripheral is connected to on the microcontroller.
	BusAddr uint32 `protobuf:"varint,2,opt,name=busAddr,proto3" json:"busAddr,omitempty"`
	//*
	// I2C general call response.
	GeneralCallResp      []byte   `protobuf:"bytes,3,opt,name=generalCallResp,proto3" json:"generalCallResp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Registration_Peripheral) Reset()         { *m = Registration_Peripheral{} }
func (m *Registration_Peripheral) String() string { return proto.CompactTextString(m) }
func (*Registration_Peripheral) ProtoMessage()    {}
func (*Registration_Peripheral) Descriptor() ([]byte, []int) {
	return fileDescriptor_edbfcf76559f568d, []int{1, 0}
}

func (m *Registration_Peripheral) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Registration_Peripheral.Unmarshal(m, b)
}
func (m *Registration_Peripheral) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Registration_Peripheral.Marshal(b, m, deterministic)
}
func (m *Registration_Peripheral) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Registration_Peripheral.Merge(m, src)
}
func (m *Registration_Peripheral) XXX_Size() int {
	return xxx_messageInfo_Registration_Peripheral.Size(m)
}
func (m *Registration_Peripheral) XXX_DiscardUnknown() {
	xxx_messageInfo_Registration_Peripheral.DiscardUnknown(m)
}

var xxx_messageInfo_Registration_Peripheral proto.InternalMessageInfo

func (m *Registration_Peripheral) GetBusId() uint32 {
	if m != nil {
		return m.BusId
	}
	return 0
}

func (m *Registration_Peripheral) GetBusAddr() uint32 {
	if m != nil {
		return m.BusAddr
	}
	return 0
}

func (m *Registration_Peripheral) GetGeneralCallResp() []byte {
	if m != nil {
		return m.GeneralCallResp
	}
	return nil
}

//*
// Provisioning frame (backend -> microcontroller).
//
// Conditions:
//  - Received Registration frame from microcontroller.
//  - Received new read definitions from corresponding peripheral controller.
type Provisioning struct {
	//*
	// Default bus address for peripheral.
	BusAddr []byte `protobuf:"bytes,1,opt,name=busAddr,proto3" json:"busAddr,omitempty"`
	//*
	// Display name of peripheral processor, displayed on dashboard.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	//
	// Peripheral read definitions.
	ReadDefinitions      []*Provisioning_ReadDef `protobuf:"bytes,3,rep,name=readDefinitions,proto3" json:"readDefinitions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *Provisioning) Reset()         { *m = Provisioning{} }
func (m *Provisioning) String() string { return proto.CompactTextString(m) }
func (*Provisioning) ProtoMessage()    {}
func (*Provisioning) Descriptor() ([]byte, []int) {
	return fileDescriptor_edbfcf76559f568d, []int{2}
}

func (m *Provisioning) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Provisioning.Unmarshal(m, b)
}
func (m *Provisioning) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Provisioning.Marshal(b, m, deterministic)
}
func (m *Provisioning) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Provisioning.Merge(m, src)
}
func (m *Provisioning) XXX_Size() int {
	return xxx_messageInfo_Provisioning.Size(m)
}
func (m *Provisioning) XXX_DiscardUnknown() {
	xxx_messageInfo_Provisioning.DiscardUnknown(m)
}

var xxx_messageInfo_Provisioning proto.InternalMessageInfo

func (m *Provisioning) GetBusAddr() []byte {
	if m != nil {
		return m.BusAddr
	}
	return nil
}

func (m *Provisioning) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Provisioning) GetReadDefinitions() []*Provisioning_ReadDef {
	if m != nil {
		return m.ReadDefinitions
	}
	return nil
}

type Provisioning_ReadDef struct {
	//*
	// An arbitrary ID for external reference. This does not relate to the
	// hardware or any application logic in the I2CRuntime. This is used
	// externally to track read definitions.
	DefinitionId uint32 `protobuf:"varint,1,opt,name=definitionId,proto3" json:"definitionId,omitempty"`
	//*
	// Some peripherals have 16-bit register IDs and some have 8-bit register
	// IDs.
	RegisterIdLength Provisioning_ReadDef_RegLength `protobuf:"varint,2,opt,name=registerIdLength,proto3,enum=Provisioning_ReadDef_RegLength" json:"registerIdLength,omitempty"`
	//*
	// Data is read on this output from a contiguous block of register IDs.
	// e.g., 0x80 to 0xFF. This is the first register ID of the block.
	RegisterId uint32 `protobuf:"varint,3,opt,name=registerId,proto3" json:"registerId,omitempty"`
	//*
	// Data is read on this output from a contiguous block of register IDs.
	// e.g., 0x80 to 0xFF. This defines the number of register IDs in the block.
	// This is essentially how many times the loop will read bytes at a register
	// and then advance to the next register. For many peripherals this value is
	// simple 1 (i.e., there is no need to advance).
	RegisterBlockLength uint32 `protobuf:"varint,4,opt,name=registerBlockLength,proto3" json:"registerBlockLength,omitempty"`
	//*
	// The number of bytes that will be read at each register ID in the
	// contiguous block. This means that the total number of bytes retrieved
	// from one ReadDefinition instance is:
	//
	//     numBytesPerRegister * registerBlockLength
	NumBytesPerRegister uint32 `protobuf:"varint,5,opt,name=numBytesPerRegister,proto3" json:"numBytesPerRegister,omitempty"`
	//*
	// How many milliseconds between reading all bytes from the block of
	// registers?
	ReadPeriod           uint32   `protobuf:"varint,6,opt,name=readPeriod,proto3" json:"readPeriod,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Provisioning_ReadDef) Reset()         { *m = Provisioning_ReadDef{} }
func (m *Provisioning_ReadDef) String() string { return proto.CompactTextString(m) }
func (*Provisioning_ReadDef) ProtoMessage()    {}
func (*Provisioning_ReadDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_edbfcf76559f568d, []int{2, 0}
}

func (m *Provisioning_ReadDef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Provisioning_ReadDef.Unmarshal(m, b)
}
func (m *Provisioning_ReadDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Provisioning_ReadDef.Marshal(b, m, deterministic)
}
func (m *Provisioning_ReadDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Provisioning_ReadDef.Merge(m, src)
}
func (m *Provisioning_ReadDef) XXX_Size() int {
	return xxx_messageInfo_Provisioning_ReadDef.Size(m)
}
func (m *Provisioning_ReadDef) XXX_DiscardUnknown() {
	xxx_messageInfo_Provisioning_ReadDef.DiscardUnknown(m)
}

var xxx_messageInfo_Provisioning_ReadDef proto.InternalMessageInfo

func (m *Provisioning_ReadDef) GetDefinitionId() uint32 {
	if m != nil {
		return m.DefinitionId
	}
	return 0
}

func (m *Provisioning_ReadDef) GetRegisterIdLength() Provisioning_ReadDef_RegLength {
	if m != nil {
		return m.RegisterIdLength
	}
	return Provisioning_ReadDef_RL16
}

func (m *Provisioning_ReadDef) GetRegisterId() uint32 {
	if m != nil {
		return m.RegisterId
	}
	return 0
}

func (m *Provisioning_ReadDef) GetRegisterBlockLength() uint32 {
	if m != nil {
		return m.RegisterBlockLength
	}
	return 0
}

func (m *Provisioning_ReadDef) GetNumBytesPerRegister() uint32 {
	if m != nil {
		return m.NumBytesPerRegister
	}
	return 0
}

func (m *Provisioning_ReadDef) GetReadPeriod() uint32 {
	if m != nil {
		return m.ReadPeriod
	}
	return 0
}

//*
// Payload frame (microcontroller -> backend).
//
// The microcontroller UUID (MAC address) will be sent in the MQTT topic.
//
// Conditions:
//  - Data collected from peripheral.
type Payload struct {
	//*
	// I2C bus ID payload was collected from.
	BusId uint32 `protobuf:"varint,1,opt,name=busId,proto3" json:"busId,omitempty"`
	//*
	// I2C bus address payload was collected from.
	BusAddr uint32 `protobuf:"varint,2,opt,name=busAddr,proto3" json:"busAddr,omitempty"`
	//*
	// Payload collection definition identifier, matching ReadDef.
	DefinitionId uint32 `protobuf:"varint,3,opt,name=definitionId,proto3" json:"definitionId,omitempty"`
	//*
	// Contents of peripheral read.
	Data                 []byte   `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Payload) Reset()         { *m = Payload{} }
func (m *Payload) String() string { return proto.CompactTextString(m) }
func (*Payload) ProtoMessage()    {}
func (*Payload) Descriptor() ([]byte, []int) {
	return fileDescriptor_edbfcf76559f568d, []int{3}
}

func (m *Payload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Payload.Unmarshal(m, b)
}
func (m *Payload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Payload.Marshal(b, m, deterministic)
}
func (m *Payload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Payload.Merge(m, src)
}
func (m *Payload) XXX_Size() int {
	return xxx_messageInfo_Payload.Size(m)
}
func (m *Payload) XXX_DiscardUnknown() {
	xxx_messageInfo_Payload.DiscardUnknown(m)
}

var xxx_messageInfo_Payload proto.InternalMessageInfo

func (m *Payload) GetBusId() uint32 {
	if m != nil {
		return m.BusId
	}
	return 0
}

func (m *Payload) GetBusAddr() uint32 {
	if m != nil {
		return m.BusAddr
	}
	return 0
}

func (m *Payload) GetDefinitionId() uint32 {
	if m != nil {
		return m.DefinitionId
	}
	return 0
}

func (m *Payload) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

//*
// Request frame (backend -> microcontroller).
//
// Conditions:
//  - Request microcontroller to reboot.
//  - Request microcontroller to poll peripherals, send Payload frame(s).
//  - Request microcontroller to send heartbeat (Registration frame).
type Request struct {
	Action               Request_Action `protobuf:"varint,1,opt,name=action,proto3,enum=Request_Action" json:"action,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_edbfcf76559f568d, []int{4}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetAction() Request_Action {
	if m != nil {
		return m.Action
	}
	return Request_REBOOT
}

func init() {
	proto.RegisterEnum("Provisioning_ReadDef_RegLength", Provisioning_ReadDef_RegLength_name, Provisioning_ReadDef_RegLength_value)
	proto.RegisterEnum("Request_Action", Request_Action_name, Request_Action_value)
	proto.RegisterType((*Telemetry)(nil), "Telemetry")
	proto.RegisterType((*Registration)(nil), "Registration")
	proto.RegisterType((*Registration_Peripheral)(nil), "Registration.Peripheral")
	proto.RegisterType((*Provisioning)(nil), "Provisioning")
	proto.RegisterType((*Provisioning_ReadDef)(nil), "Provisioning.ReadDef")
	proto.RegisterType((*Payload)(nil), "Payload")
	proto.RegisterType((*Request)(nil), "Request")
}

func init() { proto.RegisterFile("telemetry.proto", fileDescriptor_edbfcf76559f568d) }

var fileDescriptor_edbfcf76559f568d = []byte{
	// 571 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xdd, 0x4e, 0xdb, 0x30,
	0x14, 0x6e, 0x9a, 0xd0, 0xd0, 0xd3, 0x94, 0x46, 0x1e, 0x93, 0x22, 0x2e, 0x18, 0x8a, 0x26, 0x8d,
	0xab, 0x68, 0x2b, 0x13, 0x9a, 0x76, 0x83, 0x5a, 0xc8, 0x46, 0x35, 0xb4, 0x76, 0x87, 0xee, 0x1a,
	0x19, 0x62, 0x4a, 0xb4, 0x34, 0x09, 0x76, 0x82, 0xd4, 0x37, 0xd8, 0x53, 0xf1, 0x04, 0x7b, 0xa8,
	0xc9, 0xce, 0x0f, 0x69, 0xd7, 0x9b, 0xdd, 0xf9, 0x7c, 0x3f, 0xf1, 0x77, 0x8e, 0xed, 0xc0, 0x20,
	0x63, 0x11, 0x5b, 0xb2, 0x8c, 0xaf, 0xbc, 0x94, 0x27, 0x59, 0xe2, 0xfe, 0xd1, 0xa0, 0x3b, 0xaf,
	0x30, 0x72, 0x02, 0x16, 0x67, 0x8b, 0x50, 0x64, 0x9c, 0x66, 0x61, 0x12, 0x3b, 0xda, 0x91, 0x76,
	0xdc, 0x1b, 0xf6, 0x3d, 0x6c, 0x80, 0x97, 0x2d, 0x5c, 0x13, 0x49, 0x53, 0xca, 0x93, 0xa7, 0x50,
	0x84, 0x49, 0x1c, 0xc6, 0x0b, 0xa7, 0x5d, 0x9a, 0x66, 0x0d, 0x50, 0x9a, 0x9a, 0x22, 0xf2, 0x16,
	0xcc, 0x94, 0xae, 0xa2, 0x84, 0x06, 0x8e, 0xae, 0xf4, 0xbb, 0xde, 0xac, 0xa8, 0x2f, 0x5b, 0x58,
	0x51, 0x52, 0xc5, 0xd9, 0x63, 0xce, 0x44, 0xe6, 0x18, 0xa5, 0x0a, 0x8b, 0x5a, 0xaa, 0x4a, 0x6a,
	0xdc, 0x05, 0x73, 0xc9, 0x84, 0xa0, 0x0b, 0xe6, 0xfe, 0x6e, 0x83, 0xd5, 0x0c, 0x4b, 0x1c, 0x30,
	0x9f, 0x18, 0x17, 0x55, 0x33, 0x7d, 0xac, 0x4a, 0x42, 0xc0, 0xc8, 0xf3, 0x30, 0x50, 0x71, 0x2d,
	0x54, 0x6b, 0x89, 0x85, 0xe9, 0xd3, 0x47, 0x15, 0xc9, 0x42, 0xb5, 0x2e, 0xb1, 0x53, 0x15, 0xa0,
	0xc0, 0x4e, 0xc9, 0x67, 0xe8, 0xa5, 0x8c, 0x87, 0xe9, 0x03, 0xe3, 0x34, 0x12, 0xce, 0xce, 0x91,
	0x7e, 0xdc, 0x1b, 0x3a, 0x6b, 0x63, 0xf2, 0x66, 0xb5, 0x00, 0x9b, 0xe2, 0x83, 0x7b, 0x80, 0x17,
	0x8a, 0xec, 0xc3, 0xce, 0x6d, 0x2e, 0x26, 0x41, 0x99, 0xae, 0x28, 0x64, 0xea, 0xdb, 0x5c, 0x8c,
	0x82, 0x80, 0xab, 0x78, 0x7d, 0xac, 0x4a, 0x72, 0x0c, 0x83, 0x05, 0x8b, 0xa5, 0xf5, 0x9c, 0x46,
	0x11, 0x32, 0x91, 0x96, 0x61, 0x37, 0x61, 0xf7, 0x59, 0x07, 0xab, 0x79, 0x04, 0xcd, 0x8f, 0x6a,
	0xca, 0x52, 0x7f, 0x94, 0x80, 0x11, 0xd3, 0x25, 0x53, 0x7b, 0x75, 0x51, 0xad, 0xc9, 0x19, 0x0c,
	0x38, 0xa3, 0xc1, 0x05, 0xbb, 0x0f, 0xe3, 0x50, 0x36, 0x24, 0x1c, 0x5d, 0xb5, 0xf9, 0x7a, 0xed,
	0x60, 0x3d, 0x2c, 0x44, 0xb8, 0xa9, 0x3e, 0x78, 0x6e, 0x83, 0x59, 0x92, 0xc4, 0x05, 0x2b, 0xa8,
	0xa9, 0xba, 0xd9, 0x35, 0x8c, 0x7c, 0x03, 0xbb, 0xb8, 0x56, 0x8c, 0x4f, 0x82, 0x2b, 0x16, 0x2f,
	0xb2, 0x07, 0x15, 0x68, 0x6f, 0xf8, 0x66, 0xeb, 0x8e, 0x72, 0xda, 0x85, 0x0c, 0xff, 0x31, 0x92,
	0x43, 0x80, 0x17, 0x4c, 0x4d, 0xa8, 0x8f, 0x0d, 0x84, 0xbc, 0x87, 0x57, 0x55, 0x35, 0x8e, 0x92,
	0xbb, 0x5f, 0xe5, 0x7e, 0x86, 0x12, 0x6e, 0xa3, 0xa4, 0x23, 0xce, 0x97, 0xe3, 0x55, 0xc6, 0xc4,
	0x8c, 0x71, 0x2c, 0x15, 0xce, 0x4e, 0xe1, 0xd8, 0x42, 0x15, 0x19, 0x68, 0x20, 0x0f, 0x3b, 0x09,
	0x9c, 0x4e, 0x95, 0xa1, 0x42, 0xdc, 0x43, 0xe8, 0xd6, 0x2d, 0x90, 0x5d, 0x30, 0xf0, 0xea, 0xc3,
	0xa9, 0xdd, 0x22, 0x26, 0xe8, 0x78, 0xf5, 0xc9, 0xd6, 0xdc, 0x47, 0x30, 0xcb, 0x27, 0xf1, 0xdf,
	0xb7, 0x64, 0x73, 0xde, 0xfa, 0x96, 0x79, 0x13, 0x30, 0x02, 0x9a, 0xd1, 0xea, 0x5e, 0xcb, 0xb5,
	0x2b, 0xe4, 0x91, 0xa9, 0x47, 0x45, 0xde, 0x41, 0x87, 0xde, 0xd5, 0x3f, 0x81, 0xbd, 0xe1, 0xa0,
	0x7a, 0x79, 0xde, 0x48, 0xc1, 0x58, 0xd2, 0xee, 0x19, 0x74, 0x0a, 0x84, 0x00, 0x74, 0xd0, 0x1f,
	0x4f, 0xa7, 0x73, 0xbb, 0x45, 0x06, 0xd0, 0xfb, 0x32, 0xc5, 0x73, 0xff, 0x06, 0xfd, 0xd1, 0xc5,
	0xb5, 0xad, 0x11, 0x07, 0xf6, 0xd1, 0xff, 0xf1, 0xd3, 0xbf, 0x9e, 0xdf, 0xa0, 0xff, 0x75, 0x72,
	0x3d, 0xc7, 0xd1, 0x7c, 0x32, 0xfd, 0x6e, 0xb7, 0x6f, 0x3b, 0xea, 0x4f, 0x74, 0xf2, 0x37, 0x00,
	0x00, 0xff, 0xff, 0xb0, 0x22, 0xd5, 0x75, 0x9c, 0x04, 0x00, 0x00,
}
