// BSD 2-Clause License
//
// Copyright (c) 2020 Emily Horsman, Tanner Ryan. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.4
// source: telemetry.proto

package telemetry

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Telemetry_Message int32

const (
	Telemetry_ZERO         Telemetry_Message = 0
	Telemetry_REGISTRATION Telemetry_Message = 1
	Telemetry_PROVISIONING Telemetry_Message = 2
	Telemetry_PAYLOAD      Telemetry_Message = 3
	Telemetry_REQUEST      Telemetry_Message = 4
)

// Enum value maps for Telemetry_Message.
var (
	Telemetry_Message_name = map[int32]string{
		0: "ZERO",
		1: "REGISTRATION",
		2: "PROVISIONING",
		3: "PAYLOAD",
		4: "REQUEST",
	}
	Telemetry_Message_value = map[string]int32{
		"ZERO":         0,
		"REGISTRATION": 1,
		"PROVISIONING": 2,
		"PAYLOAD":      3,
		"REQUEST":      4,
	}
)

func (x Telemetry_Message) Enum() *Telemetry_Message {
	p := new(Telemetry_Message)
	*p = x
	return p
}

func (x Telemetry_Message) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Telemetry_Message) Descriptor() protoreflect.EnumDescriptor {
	return file_telemetry_proto_enumTypes[0].Descriptor()
}

func (Telemetry_Message) Type() protoreflect.EnumType {
	return &file_telemetry_proto_enumTypes[0]
}

func (x Telemetry_Message) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Telemetry_Message.Descriptor instead.
func (Telemetry_Message) EnumDescriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{0, 0}
}

type Provisioning_ReadDef_RegLength int32

const (
	Provisioning_ReadDef_RL16 Provisioning_ReadDef_RegLength = 0
	Provisioning_ReadDef_RL8  Provisioning_ReadDef_RegLength = 1
)

// Enum value maps for Provisioning_ReadDef_RegLength.
var (
	Provisioning_ReadDef_RegLength_name = map[int32]string{
		0: "RL16",
		1: "RL8",
	}
	Provisioning_ReadDef_RegLength_value = map[string]int32{
		"RL16": 0,
		"RL8":  1,
	}
)

func (x Provisioning_ReadDef_RegLength) Enum() *Provisioning_ReadDef_RegLength {
	p := new(Provisioning_ReadDef_RegLength)
	*p = x
	return p
}

func (x Provisioning_ReadDef_RegLength) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Provisioning_ReadDef_RegLength) Descriptor() protoreflect.EnumDescriptor {
	return file_telemetry_proto_enumTypes[1].Descriptor()
}

func (Provisioning_ReadDef_RegLength) Type() protoreflect.EnumType {
	return &file_telemetry_proto_enumTypes[1]
}

func (x Provisioning_ReadDef_RegLength) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Provisioning_ReadDef_RegLength.Descriptor instead.
func (Provisioning_ReadDef_RegLength) EnumDescriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{2, 0, 0}
}

type Request_Action int32

const (
	//*
	// Request microcontroller reboot.
	Request_REBOOT Request_Action = 0
	//*
	// Request manual schedule execution and Payload frame(s).
	Request_FORCE_READS Request_Action = 1
	//*
	// Request microcontroller to rescan I2C bus and resend Registration.
	Request_FORCE_SCAN Request_Action = 2
	//*
	// Request manual Registration frame.
	Request_REQUEST_REGISTRATION Request_Action = 3
	//*
	// Request microcontroller to clear preferences stored in flash.
	Request_CLEAR_PREFERENCES Request_Action = 4
)

// Enum value maps for Request_Action.
var (
	Request_Action_name = map[int32]string{
		0: "REBOOT",
		1: "FORCE_READS",
		2: "FORCE_SCAN",
		3: "REQUEST_REGISTRATION",
		4: "CLEAR_PREFERENCES",
	}
	Request_Action_value = map[string]int32{
		"REBOOT":               0,
		"FORCE_READS":          1,
		"FORCE_SCAN":           2,
		"REQUEST_REGISTRATION": 3,
		"CLEAR_PREFERENCES":    4,
	}
)

func (x Request_Action) Enum() *Request_Action {
	p := new(Request_Action)
	*p = x
	return p
}

func (x Request_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Request_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_telemetry_proto_enumTypes[2].Descriptor()
}

func (Request_Action) Type() protoreflect.EnumType {
	return &file_telemetry_proto_enumTypes[2]
}

func (x Request_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Request_Action.Descriptor instead.
func (Request_Action) EnumDescriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{4, 0}
}

//*
// Telemetry wire protocol for MQTT communication between microcontrollers and the backend.
type Telemetry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// Type of frame message encoded.
	Message Telemetry_Message `protobuf:"varint,1,opt,name=message,proto3,enum=Telemetry_Message" json:"message,omitempty"`
	//*
	// Registration frame notifes backend of microcontroller firmware, IP addresses, and connected peripherals.
	Registration *Registration `protobuf:"bytes,2,opt,name=registration,proto3" json:"registration,omitempty"`
	//*
	// Provisioning frame provides microcontroller with peripheral read definitions.
	Provisioning *Provisioning `protobuf:"bytes,3,opt,name=provisioning,proto3" json:"provisioning,omitempty"`
	//*
	// Payload frame provides backend with raw peripheral byte data collected from microcontrollers.
	Payload *Payload `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	//*
	// Request frame notifes microcontroller to perform one-off requests.
	Request *Request `protobuf:"bytes,5,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *Telemetry) Reset() {
	*x = Telemetry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Telemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Telemetry) ProtoMessage() {}

func (x *Telemetry) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Telemetry.ProtoReflect.Descriptor instead.
func (*Telemetry) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{0}
}

func (x *Telemetry) GetMessage() Telemetry_Message {
	if x != nil {
		return x.Message
	}
	return Telemetry_ZERO
}

func (x *Telemetry) GetRegistration() *Registration {
	if x != nil {
		return x.Registration
	}
	return nil
}

func (x *Telemetry) GetProvisioning() *Provisioning {
	if x != nil {
		return x.Provisioning
	}
	return nil
}

func (x *Telemetry) GetPayload() *Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Telemetry) GetRequest() *Request {
	if x != nil {
		return x.Request
	}
	return nil
}

//*
// Registration frame (microcontroller -> backend).
//
// The microcontroller UUID (MAC address) will be sent in the MQTT topic.
//
// Conditions:
//  - MQTT connection established, re-established
//  - Peripheral connected, disconnected
type Registration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// Firmware version identifier.
	Version uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	//*
	// Microcontroller unique identifier (MAC address).
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	//*
	// Microcontroller IPv4 address.
	Ipv4 string `protobuf:"bytes,3,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	//*
	// Microcontroller IPv6 address.
	Ipv6 string `protobuf:"bytes,4,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	//*
	// List of connected peripherals.
	Peripherals []*Registration_Peripheral `protobuf:"bytes,5,rep,name=peripherals,proto3" json:"peripherals,omitempty"`
}

func (x *Registration) Reset() {
	*x = Registration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Registration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Registration) ProtoMessage() {}

func (x *Registration) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Registration.ProtoReflect.Descriptor instead.
func (*Registration) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{1}
}

func (x *Registration) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Registration) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Registration) GetIpv4() string {
	if x != nil {
		return x.Ipv4
	}
	return ""
}

func (x *Registration) GetIpv6() string {
	if x != nil {
		return x.Ipv6
	}
	return ""
}

func (x *Registration) GetPeripherals() []*Registration_Peripheral {
	if x != nil {
		return x.Peripherals
	}
	return nil
}

//*
// Provisioning frame (backend -> microcontroller).
//
// Conditions:
//  - Received Registration frame from microcontroller.
//  - Received new read definitions from corresponding peripheral controller.
type Provisioning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// Default bus address for peripheral.
	BusAddr uint32 `protobuf:"varint,1,opt,name=busAddr,proto3" json:"busAddr,omitempty"`
	//*
	// Display name of peripheral processor, displayed on dashboard.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	//
	// Peripheral read definitions.
	ReadDefinitions []*Provisioning_ReadDef `protobuf:"bytes,3,rep,name=readDefinitions,proto3" json:"readDefinitions,omitempty"`
}

func (x *Provisioning) Reset() {
	*x = Provisioning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Provisioning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Provisioning) ProtoMessage() {}

func (x *Provisioning) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Provisioning.ProtoReflect.Descriptor instead.
func (*Provisioning) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{2}
}

func (x *Provisioning) GetBusAddr() uint32 {
	if x != nil {
		return x.BusAddr
	}
	return 0
}

func (x *Provisioning) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Provisioning) GetReadDefinitions() []*Provisioning_ReadDef {
	if x != nil {
		return x.ReadDefinitions
	}
	return nil
}

//*
// Payload frame (microcontroller -> backend).
//
// The microcontroller UUID (MAC address) will be sent in the MQTT topic.
//
// Conditions:
//  - Data collected from peripheral.
type Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// I2C bus ID payload was collected from.
	BusId uint32 `protobuf:"varint,1,opt,name=busId,proto3" json:"busId,omitempty"`
	//*
	// I2C bus address payload was collected from.
	BusAddr uint32 `protobuf:"varint,2,opt,name=busAddr,proto3" json:"busAddr,omitempty"`
	//*
	// Payload collection definition identifier, matching ReadDef.
	DefinitionId uint32 `protobuf:"varint,3,opt,name=definitionId,proto3" json:"definitionId,omitempty"`
	//*
	// Contents of peripheral read.
	Data []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Payload) Reset() {
	*x = Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payload) ProtoMessage() {}

func (x *Payload) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payload.ProtoReflect.Descriptor instead.
func (*Payload) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{3}
}

func (x *Payload) GetBusId() uint32 {
	if x != nil {
		return x.BusId
	}
	return 0
}

func (x *Payload) GetBusAddr() uint32 {
	if x != nil {
		return x.BusAddr
	}
	return 0
}

func (x *Payload) GetDefinitionId() uint32 {
	if x != nil {
		return x.DefinitionId
	}
	return 0
}

func (x *Payload) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

//*
// Request frame (backend -> microcontroller).
//
// Conditions:
//  - Request microcontroller to reboot.
//  - Request microcontroller to poll peripherals, send Payload frame(s).
//  - Request microcontroller to send heartbeat (Registration frame).
type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action Request_Action `protobuf:"varint,1,opt,name=action,proto3,enum=Request_Action" json:"action,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{4}
}

func (x *Request) GetAction() Request_Action {
	if x != nil {
		return x.Action
	}
	return Request_REBOOT
}

type Registration_Peripheral struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// The I2C bus this peripheral is connected to on the microcontroller. Represented by the SDA line pin.
	BusId uint32 `protobuf:"varint,1,opt,name=busId,proto3" json:"busId,omitempty"`
	//*
	// The I2C bus address this peripheral is connected to on the microcontroller.
	BusAddr uint32 `protobuf:"varint,2,opt,name=busAddr,proto3" json:"busAddr,omitempty"`
	//*
	// I2C general call response.
	GeneralCallResp []byte `protobuf:"bytes,3,opt,name=generalCallResp,proto3" json:"generalCallResp,omitempty"`
}

func (x *Registration_Peripheral) Reset() {
	*x = Registration_Peripheral{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Registration_Peripheral) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Registration_Peripheral) ProtoMessage() {}

func (x *Registration_Peripheral) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Registration_Peripheral.ProtoReflect.Descriptor instead.
func (*Registration_Peripheral) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Registration_Peripheral) GetBusId() uint32 {
	if x != nil {
		return x.BusId
	}
	return 0
}

func (x *Registration_Peripheral) GetBusAddr() uint32 {
	if x != nil {
		return x.BusAddr
	}
	return 0
}

func (x *Registration_Peripheral) GetGeneralCallResp() []byte {
	if x != nil {
		return x.GeneralCallResp
	}
	return nil
}

type Provisioning_ReadDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// An arbitrary ID for external reference. This does not relate to the
	// hardware or any application logic in the I2CRuntime. This is used
	// externally to track read definitions.
	DefinitionId uint32 `protobuf:"varint,1,opt,name=definitionId,proto3" json:"definitionId,omitempty"`
	//*
	// Some peripherals have 16-bit register IDs and some have 8-bit register
	// IDs.
	RegisterIdLength Provisioning_ReadDef_RegLength `protobuf:"varint,2,opt,name=registerIdLength,proto3,enum=Provisioning_ReadDef_RegLength" json:"registerIdLength,omitempty"`
	//*
	// Data is read on this output from a contiguous block of register IDs.
	// e.g., 0x80 to 0xFF. This is the first register ID of the block.
	RegisterId uint32 `protobuf:"varint,3,opt,name=registerId,proto3" json:"registerId,omitempty"`
	//*
	// Data is read on this output from a contiguous block of register IDs.
	// e.g., 0x80 to 0xFF. This defines the number of register IDs in the block.
	// This is essentially how many times the loop will read bytes at a register
	// and then advance to the next register. For many peripherals this value is
	// simple 1 (i.e., there is no need to advance).
	RegisterBlockLength uint32 `protobuf:"varint,4,opt,name=registerBlockLength,proto3" json:"registerBlockLength,omitempty"`
	//*
	// The number of bytes that will be read at each register ID in the
	// contiguous block. This means that the total number of bytes retrieved
	// from one ReadDefinition instance is:
	//
	//     numBytesPerRegister * registerBlockLength
	NumBytesPerRegister uint32 `protobuf:"varint,5,opt,name=numBytesPerRegister,proto3" json:"numBytesPerRegister,omitempty"`
	//*
	// How many milliseconds between reading all bytes from the block of
	// registers?
	ReadPeriod uint32 `protobuf:"varint,6,opt,name=readPeriod,proto3" json:"readPeriod,omitempty"`
}

func (x *Provisioning_ReadDef) Reset() {
	*x = Provisioning_ReadDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetry_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Provisioning_ReadDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Provisioning_ReadDef) ProtoMessage() {}

func (x *Provisioning_ReadDef) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Provisioning_ReadDef.ProtoReflect.Descriptor instead.
func (*Provisioning_ReadDef) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Provisioning_ReadDef) GetDefinitionId() uint32 {
	if x != nil {
		return x.DefinitionId
	}
	return 0
}

func (x *Provisioning_ReadDef) GetRegisterIdLength() Provisioning_ReadDef_RegLength {
	if x != nil {
		return x.RegisterIdLength
	}
	return Provisioning_ReadDef_RL16
}

func (x *Provisioning_ReadDef) GetRegisterId() uint32 {
	if x != nil {
		return x.RegisterId
	}
	return 0
}

func (x *Provisioning_ReadDef) GetRegisterBlockLength() uint32 {
	if x != nil {
		return x.RegisterBlockLength
	}
	return 0
}

func (x *Provisioning_ReadDef) GetNumBytesPerRegister() uint32 {
	if x != nil {
		return x.NumBytesPerRegister
	}
	return 0
}

func (x *Provisioning_ReadDef) GetReadPeriod() uint32 {
	if x != nil {
		return x.ReadPeriod
	}
	return 0
}

var File_telemetry_proto protoreflect.FileDescriptor

var file_telemetry_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xba, 0x02, 0x0a, 0x09, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12,
	0x2c, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a,
	0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x31, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x22, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x51, 0x0a, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x10,
	0x03, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x04, 0x22, 0x88,
	0x02, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x70, 0x76, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x70, 0x76,
	0x34, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x36, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x70, 0x76, 0x36, 0x12, 0x3a, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x70, 0x68, 0x65,
	0x72, 0x61, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x70, 0x68,
	0x65, 0x72, 0x61, 0x6c, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x70, 0x68, 0x65, 0x72, 0x61, 0x6c,
	0x73, 0x1a, 0x66, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x69, 0x70, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x75, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x62, 0x75, 0x73, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x73, 0x41, 0x64, 0x64, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x75, 0x73, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x28, 0x0a, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0xbe, 0x03, 0x0a, 0x0c, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75,
	0x73, 0x41, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x75, 0x73,
	0x41, 0x64, 0x64, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x64,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x2e, 0x52, 0x65, 0x61, 0x64, 0x44, 0x65, 0x66, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xbe, 0x02, 0x0a, 0x07, 0x52, 0x65,
	0x61, 0x64, 0x44, 0x65, 0x66, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x10, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x44, 0x65, 0x66, 0x2e, 0x52, 0x65, 0x67, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50,
	0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x61, 0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x72, 0x65, 0x61, 0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x1e, 0x0a, 0x09, 0x52, 0x65,
	0x67, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x4c, 0x31, 0x36, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x4c, 0x38, 0x10, 0x01, 0x22, 0x71, 0x0a, 0x07, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x73, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x75, 0x73, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x75, 0x73, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x75,
	0x73, 0x41, 0x64, 0x64, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9a, 0x01,
	0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x66, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x0a, 0x06,
	0x52, 0x45, 0x42, 0x4f, 0x4f, 0x54, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x4f, 0x52, 0x43,
	0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x53, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x4f, 0x52,
	0x43, 0x45, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x50, 0x52, 0x45,
	0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x53, 0x10, 0x04, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x3b,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_telemetry_proto_rawDescOnce sync.Once
	file_telemetry_proto_rawDescData = file_telemetry_proto_rawDesc
)

func file_telemetry_proto_rawDescGZIP() []byte {
	file_telemetry_proto_rawDescOnce.Do(func() {
		file_telemetry_proto_rawDescData = protoimpl.X.CompressGZIP(file_telemetry_proto_rawDescData)
	})
	return file_telemetry_proto_rawDescData
}

var file_telemetry_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_telemetry_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_telemetry_proto_goTypes = []interface{}{
	(Telemetry_Message)(0),              // 0: Telemetry.Message
	(Provisioning_ReadDef_RegLength)(0), // 1: Provisioning.ReadDef.RegLength
	(Request_Action)(0),                 // 2: Request.Action
	(*Telemetry)(nil),                   // 3: Telemetry
	(*Registration)(nil),                // 4: Registration
	(*Provisioning)(nil),                // 5: Provisioning
	(*Payload)(nil),                     // 6: Payload
	(*Request)(nil),                     // 7: Request
	(*Registration_Peripheral)(nil),     // 8: Registration.Peripheral
	(*Provisioning_ReadDef)(nil),        // 9: Provisioning.ReadDef
}
var file_telemetry_proto_depIdxs = []int32{
	0, // 0: Telemetry.message:type_name -> Telemetry.Message
	4, // 1: Telemetry.registration:type_name -> Registration
	5, // 2: Telemetry.provisioning:type_name -> Provisioning
	6, // 3: Telemetry.payload:type_name -> Payload
	7, // 4: Telemetry.request:type_name -> Request
	8, // 5: Registration.peripherals:type_name -> Registration.Peripheral
	9, // 6: Provisioning.readDefinitions:type_name -> Provisioning.ReadDef
	2, // 7: Request.action:type_name -> Request.Action
	1, // 8: Provisioning.ReadDef.registerIdLength:type_name -> Provisioning.ReadDef.RegLength
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_telemetry_proto_init() }
func file_telemetry_proto_init() {
	if File_telemetry_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_telemetry_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Telemetry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Registration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Provisioning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Registration_Peripheral); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetry_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Provisioning_ReadDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_telemetry_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_telemetry_proto_goTypes,
		DependencyIndexes: file_telemetry_proto_depIdxs,
		EnumInfos:         file_telemetry_proto_enumTypes,
		MessageInfos:      file_telemetry_proto_msgTypes,
	}.Build()
	File_telemetry_proto = out.File
	file_telemetry_proto_rawDesc = nil
	file_telemetry_proto_goTypes = nil
	file_telemetry_proto_depIdxs = nil
}
