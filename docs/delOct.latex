\documentclass{article}
\usepackage[margin=1.5in]{geometry}
\usepackage{parskip}
\usepackage{fancyhdr}
\usepackage{hyperref}
\pagestyle{fancy}
\fancyhead[L]{COMPSCI 4ZP6A}
\fancyhead[R]{Emily Horsman <horsmane>, Tanner Ryan <ryant3>}

\newcommand{\name}{Telemetry}
\newcommand{\proto}{I\textsuperscript{2}C\,}

\begin{document}

\section*{October Deliverable}
\tableofcontents


\newpage
\section{Purpose}

\subsection{Definitions}

\name\ is split into a few different products that each have requirements.
The definitions below let us refer to these products and narrow the scope of external terms (such as \proto and `microcontroller').

\begin{enumerate}
\item \proto: Inter-Integrated Circuit, a standardized, packet switched serial bus. Allows for bidirectional communication between hardware peripheral and microcontrollers.
\item Microcontroller: Arduino powered, single board computer. Provides an \proto bus and IP network connection.
\item Controller: main application server for \name. Responsible for communication with microcontroller(s), exposing HTTP API service, and serving the dashboard.
\item Peripheral processor: responsible for informing the controller how a sensor model works via \name's external interface.
\item Peripheral: Any \proto hardware sensor (e.g. temperature, accelerometer, thermal camera) which uses the \proto standard ``register paradigm''.
\end{enumerate}

\subsection{Background}
\proto is an existing bus protocol which enables hardware peripherals to communicate with each other and devices such as microcontrollers.
Currently, repetitive application logic must be written for each \proto device.
This application logic is hard to write in a maintainable, self-documenting way.
Any modification of the application logic means that firmware updates need to be applied to other devices on the \proto bus (most commonly, the microcontroller serving as the ``master'' device).
This creates a significant amount of work throughout the prototyping and maintenance stages of a hardware project.

\subsection{System overview}
\name\ will provide three main features:
\begin{enumerate}
\item Peripheral Autodiscovery: to automatically detect when a peripheral is physically connected to a microcontroller. Allow the user to provision the device through a configurable web dashboard.
\item Data Transport: provide a robust, software-defined transport mechanism to allow for real-time, bidirectional communication with \proto devices.
\item Modular ingestion: create a language-agnostic API for users to translate raw \proto data into usable data.
\end{enumerate}

\name\ will support different \proto peripherals using a language agnostic peripheral processor.

\subsection{References}
\begin{enumerate}
\item Texas Instruments (June 2015), Application Report: ``Understanding the \proto bus''\\
http://www.ti.com/lit/an/slva704/slva704.pdf
\end{enumerate}


\newpage
\section{Overall description}

\subsection{Product perspective}

\subsubsection{User interfaces}
\begin{enumerate}
\item The user shall interact with the system through a dashboard, using a web browser.
\item The dashboard will interface with the controller through an HTTP API. The user may interface with this directly for use with a custom dashboard.
\end{enumerate}

\subsubsection{Hardware interfaces}
\begin{enumerate}
\item The microcontroller must interface with sensors over the \proto bus.
\end{enumerate}

\subsubsection{Software interfaces}
\begin{enumerate}
\item The Arduino library must support the Arduino microcontroller platform.
\item The peripheral must conform to \name's protocol, translating raw data into usable values.
\end{enumerate}

\subsubsection{Memory Constraints}
\begin{enumerate}
\item The Arduino library must function on a microcontroller with 512KB of RAM.
\end{enumerate}

\subsection{Constaints, assumptions and dependencies}
\begin{enumerate}
\item Peripherals must comply with the \proto register paradigm.
\item A Peripheral must have an accompanying processor capable of translating device specific register configurations.
\end{enumerate}


\newpage
\section{Specific requirements}

\subsection{External interface requirements}
\begin{enumerate}
\item Not applicable.
\end{enumerate}

\subsection{Functional requirements}

\subsubsection{Dashboard}

\begin{enumerate}
\item The dashboard must inform an active user when a sensor is connected.
\item The dashboard must inform an active user when a sensor is disconnected.
\item The dashboard must inform the user of the sensor's unique ID.
\item The dashboard must allow the user to assign a human-readable name to a sensor.
\item The dashboard must require the user to configure the type of sensor when connected.
    \begin{enumerate}
    \item The dashboard must provide a list of supported sensors for this configuration.
    \item The list must be based on the information received from the backend.
    \item The dashboard must allow the user to select a previous configuration for a connected sensor.
    \end{enumerate}
\item The dashboard must display sensor data with widgets.
    \begin{enumerate}
    \item Widgets must present data from one or more sensors.
    \item Widgets must have a configurable type which changes the presentation of data.
    \item Widgets must support displaying data across the time domain.
    \item Widgets must support displaying data as a current value.
    \end{enumerate}
\item The dashboard must offer any of the following time domain presentation types: line graph; data table.
\item The dashboard must offer any of the following current value presentation types: scatter plot; bar chart; map; color; image; gauge; pie chart.
    \iffalse
    Bar chart would have each input across the X-axis and have the Y-axis be the current value for each.
    \fi
\item The dashboard must allow widgets to be re-arranged resized within the viewport.
\item The dashboard must allow the user to save configuration presets.
    \begin{enumerate}
    \item A configuration preset must include the position, size, input keys, presentation parameters (axis scaling), and type of each widget.
    \end{enumerate}
\item The dashboard must allow the user to load configuration presets from a list of previous presets.
\item The dashboard must load the most recently used preset by default.
\end{enumerate}

\subsubsection{Controller}
\begin{enumerate}
\item The controller must have access to a standard IP network.
\item The controller must accept an IP connection from a microcontroller.
\item The controller must interface with an SQL database for persistent storage.
\item The controller must query the database for a provisioning configuration.
\item The controller must send a provisioning configuration to a microcontroller. 
\item The controller must accept \proto data originating from a microcontroller, storing the data in the database.
\item The controller must accept an IP connection from a peripheral controller.
\item The controller must request peripheral-specific \proto commands from a peripheral controller.
\item The controller must expose an HTTP API, querying the database as required.
    \begin{enumerate}
    \item The API must have a route to return a list of unprovisioned peripherals.
    \item The API must have a route to return a list of provisioned peripherals.
    \item The API must have a route to provision a peripheral. A record is created with pre-defined fields:
        \begin{enumerate}
            \item MAC (Media Access Control) address of microcontroller the peripheral is connected to.
            \item \proto address of connected peripheral.
            \item Human-readable (common) name of the peripheral.
            \item Type of peripheral (sensor type).
        \end{enumerate}
    \item The API must have a route to return the latest data for a requested peripheral.
    \item The API must have a route return data for a requested peripheral, within a defined start and stop time.
    \end{enumerate}
\end{enumerate}

\subsubsection{Microcontroller}
\begin{enumerate}
\item The microcontroller must have enough RAM to load \name's Arduino library.
\item The microcontroller must establish connectivity to a standard IP network.
\item The microcontroller must establish an IP connection with the controller.
\item The microcontroller must re-establish the IP connection in the event the existing connection is interrupted.
\item The microcontroller must receive a provisioning configuration from the controller.
\item The microcontroller must perform autodiscovery of peripherals connected to the \proto bus.
\item The microcontroller must parse the provisioning configuration and perform input/output (I/O) commands on the \proto bus.
\item The microcontroller must send obtained \proto data over the IP connection.
\end{enumerate}

\subsubsection{Peripheral processor}
\begin{enumerate}
\item A peripheral processor is defined by the end-user.
\item A peripheral processor is defined per each peripheral type.
\item The peripheral processor must have access to a standard IP network.
\item The peripheral processor must establish an IP connection with the controller.
\item The peripheral processor must re-establish the IP connection in the event the existing connection is interrupted.
\item The peripheral processor must advertise translation capabilities to the controller.
\item The peripheral processor must accept requests from the controller, translating pre-defined actions into \proto commands for the specific peripheral type. Supported actions include:
    \begin{enumerate}
    \item Initialize \proto peripheral connection.
    \item Read data from peripheral.
    \item Write data from peripheral.
    \end{enumerate}
\item The peripheral processor must respond to requests from the controller by providing \proto commands.
\end{enumerate}

\subsection{Performance requirements}
\begin{enumerate}
\item Upon provisioning a new peripheral, data will be accessible on the dashboard within one (1) second.
\item API responses on the controller must be returned within ten (10) seconds.
\end{enumerate}

\subsection{Database requirements}

\begin{enumerate}
\item The database must store all data received from sensors with time and unique ID.
\item The database must store a list of all provisioned peripherals for each microcontroller.
\end{enumerate}

\subsection{Software System Attributes}

\subsubsection{Reliability}
\begin{enumerate}
\item The microcontroller must re-establish the IP network connection with the controller upon disconnection.
\item All payloads sent between microcontrollers and the controller must have delivery reports.
\end{enumerate}

\subsubsection{Availability}
\begin{enumerate}
\item Not applicable.
\end{enumerate}

\subsubsection{Security}
\begin{enumerate}
\item All payloads sent between microcontrollers and the controller are sent over plaintext.
\item All payloads sent between microcontrollers and the controller must not contain confidental information.
\end{enumerate}

\subsubsection{Maintainability}
\begin{enumerate}
\item The controller must have support for event logging (tracing) for debugging purposes.
\item The Arduino library must be versioned with change logs.
\item The controller must be versioned with change logs.
\end{enumerate}

\subsubsection{Portability}

\begin{enumerate}
\item Peripheral code shall be supported for Arduino-compatible microcontrollers.
\item The dashboard shall be supported for modern evergreen browsers on viewports with a dimension of at least 1280x700.
\end{enumerate}

\end{document}
